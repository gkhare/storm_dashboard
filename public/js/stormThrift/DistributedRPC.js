//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

DistributedRPC_execute_args = function(args) {
  this.functionName = null;
  this.funcArgs = null;
  if (args) {
    if (args.functionName !== undefined) {
      this.functionName = args.functionName;
    }
    if (args.funcArgs !== undefined) {
      this.funcArgs = args.funcArgs;
    }
  }
};
DistributedRPC_execute_args.prototype = {};
DistributedRPC_execute_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.functionName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.funcArgs = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DistributedRPC_execute_args.prototype.write = function(output) {
  output.writeStructBegin('DistributedRPC_execute_args');
  if (this.functionName !== null && this.functionName !== undefined) {
    output.writeFieldBegin('functionName', Thrift.Type.STRING, 1);
    output.writeString(this.functionName);
    output.writeFieldEnd();
  }
  if (this.funcArgs !== null && this.funcArgs !== undefined) {
    output.writeFieldBegin('funcArgs', Thrift.Type.STRING, 2);
    output.writeString(this.funcArgs);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DistributedRPC_execute_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof DRPCExecutionException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
DistributedRPC_execute_result.prototype = {};
DistributedRPC_execute_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new DRPCExecutionException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DistributedRPC_execute_result.prototype.write = function(output) {
  output.writeStructBegin('DistributedRPC_execute_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DistributedRPCClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
DistributedRPCClient.prototype = {};
DistributedRPCClient.prototype.execute = function(functionName, funcArgs) {
  this.send_execute(functionName, funcArgs);
  return this.recv_execute();
};

DistributedRPCClient.prototype.send_execute = function(functionName, funcArgs) {
  this.output.writeMessageBegin('execute', Thrift.MessageType.CALL, this.seqid);
  var args = new DistributedRPC_execute_args();
  args.functionName = functionName;
  args.funcArgs = funcArgs;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

DistributedRPCClient.prototype.recv_execute = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DistributedRPC_execute_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'execute failed: unknown result';
};
