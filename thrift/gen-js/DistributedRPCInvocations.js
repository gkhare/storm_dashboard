//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

DistributedRPCInvocations_result_args = function(args) {
  this.id = null;
  this.result = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.result !== undefined) {
      this.result = args.result;
    }
  }
};
DistributedRPCInvocations_result_args.prototype = {};
DistributedRPCInvocations_result_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.result = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DistributedRPCInvocations_result_args.prototype.write = function(output) {
  output.writeStructBegin('DistributedRPCInvocations_result_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRING, 2);
    output.writeString(this.result);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DistributedRPCInvocations_result_result = function(args) {
};
DistributedRPCInvocations_result_result.prototype = {};
DistributedRPCInvocations_result_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DistributedRPCInvocations_result_result.prototype.write = function(output) {
  output.writeStructBegin('DistributedRPCInvocations_result_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DistributedRPCInvocations_fetchRequest_args = function(args) {
  this.functionName = null;
  if (args) {
    if (args.functionName !== undefined) {
      this.functionName = args.functionName;
    }
  }
};
DistributedRPCInvocations_fetchRequest_args.prototype = {};
DistributedRPCInvocations_fetchRequest_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.functionName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DistributedRPCInvocations_fetchRequest_args.prototype.write = function(output) {
  output.writeStructBegin('DistributedRPCInvocations_fetchRequest_args');
  if (this.functionName !== null && this.functionName !== undefined) {
    output.writeFieldBegin('functionName', Thrift.Type.STRING, 1);
    output.writeString(this.functionName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DistributedRPCInvocations_fetchRequest_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
DistributedRPCInvocations_fetchRequest_result.prototype = {};
DistributedRPCInvocations_fetchRequest_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new DRPCRequest();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DistributedRPCInvocations_fetchRequest_result.prototype.write = function(output) {
  output.writeStructBegin('DistributedRPCInvocations_fetchRequest_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DistributedRPCInvocations_failRequest_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
DistributedRPCInvocations_failRequest_args.prototype = {};
DistributedRPCInvocations_failRequest_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DistributedRPCInvocations_failRequest_args.prototype.write = function(output) {
  output.writeStructBegin('DistributedRPCInvocations_failRequest_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DistributedRPCInvocations_failRequest_result = function(args) {
};
DistributedRPCInvocations_failRequest_result.prototype = {};
DistributedRPCInvocations_failRequest_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DistributedRPCInvocations_failRequest_result.prototype.write = function(output) {
  output.writeStructBegin('DistributedRPCInvocations_failRequest_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DistributedRPCInvocationsClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
DistributedRPCInvocationsClient.prototype = {};
DistributedRPCInvocationsClient.prototype.result = function(id, result) {
  this.send_result(id, result);
  this.recv_result();
};

DistributedRPCInvocationsClient.prototype.send_result = function(id, result) {
  this.output.writeMessageBegin('result', Thrift.MessageType.CALL, this.seqid);
  var args = new DistributedRPCInvocations_result_args();
  args.id = id;
  args.result = result;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

DistributedRPCInvocationsClient.prototype.recv_result = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DistributedRPCInvocations_result_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
DistributedRPCInvocationsClient.prototype.fetchRequest = function(functionName) {
  this.send_fetchRequest(functionName);
  return this.recv_fetchRequest();
};

DistributedRPCInvocationsClient.prototype.send_fetchRequest = function(functionName) {
  this.output.writeMessageBegin('fetchRequest', Thrift.MessageType.CALL, this.seqid);
  var args = new DistributedRPCInvocations_fetchRequest_args();
  args.functionName = functionName;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

DistributedRPCInvocationsClient.prototype.recv_fetchRequest = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DistributedRPCInvocations_fetchRequest_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'fetchRequest failed: unknown result';
};
DistributedRPCInvocationsClient.prototype.failRequest = function(id) {
  this.send_failRequest(id);
  this.recv_failRequest();
};

DistributedRPCInvocationsClient.prototype.send_failRequest = function(id) {
  this.output.writeMessageBegin('failRequest', Thrift.MessageType.CALL, this.seqid);
  var args = new DistributedRPCInvocations_failRequest_args();
  args.id = id;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

DistributedRPCInvocationsClient.prototype.recv_failRequest = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DistributedRPCInvocations_failRequest_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
